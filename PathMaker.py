import numpy as np


class PathMaker:
    def __init__(self):
        # Constructor
        x=3

    def path_1(self):
        """ 8-curve at a constant height of 70m """
        t = np.array( (50, 100, 150, 200, 250, 300, 350, 400, 450 ) )
        X = np.zeros( (len(t), 4), dtype='float32' ) # can extend this later to also include yaw
        X[0] = [0, 15, 70, 0]
        X[1] = [-7,8,70, 0]
        X[2] = [0,0,70, 0]
        X[3] = [7, -8, 70, 0]
        X[4] = [0, -15, 70, 0]
        X[5] = [-7, -8, 70, 0]
        X[6] = [0, 0, 70, 0]
        X[7] = [7, 8, 70, 0]
        X[8] = [0, 15, 70, 0]

        return t, X

    def path_2(self):
        t = np.array( (50, 100, 150, 200, 250, 300, 350, 400, 450 ) )
        X = np.zeros( (len(t), 4), dtype='float32' ) # can extend this later to also include yaw
        X[0] = [0, 15, 65, 0]
        X[1] = [-7,8,70, 0]
        X[2] = [0,0,75,0]
        X[3] = [7, -8, 80,0]
        X[4] = [0, -15, 70,0]
        X[5] = [-7, -8, 85,0]
        X[6] = [0, 0, 90,0]
        X[7] = [7, 8, 95,0]
        X[8] = [0, 15, 80,0]

        return t, X

    def path_bigM(self):
        t = np.array( (50, 100, 150, 200, 250, 300, 350, 400, 450 ) )
        X = np.zeros( (len(t), 4), dtype='float32' ) # can extend this later to also include yaw
        X[0] = [50, 55, 65, 0]
        X[1] = [-45,40,70, 0]
        X[2] = [0,0,75, 0]
        X[3] = [-30, -30, 80, 0]
        X[4] = [40, -40, 70, 0]
        X[5] = [50, -30, 85, 0]
        X[6] = [50, -20, 90, 0]
        X[7] = [47, -10, 95, 0]
        X[8] = [20, 20, 80, 0]

        return t, X

    def path_yaw_only(self):
        t = np.array( (50, 150, 250, 350, 450 ) )
        X = np.zeros( (len(t), 4), dtype='float32' ) # can extend this later to also include yaw
        X[0] = [0, 0, 75, -20]
        X[1] = [0, 0, 75, -15]
        X[2] = [0, 0, 75, -5]
        X[3] = [0, 0, 75, 5]
        X[4] = [0, 0, 75, 20]


        return t, X

    def path_smallM(self):
        """x in -20,20; y in -20,20; z in 60,90; yaw in -20,20"""
        t = np.array( (50, 100, 150, 250, 350, 450, 500 ) )
        X = np.zeros( (len(t), 4), dtype='float32' )
        X[0] = [-15, 17, 75, 0 ]
        X[1] = [ 15, 15, 75, 0 ]
        X[2] = [-15, 10, 75, 0 ]
        X[3] = [ 15, 7, 75, 0 ]
        X[4] = [-15, 3, 75, 0 ]
        X[5] = [ 15, -3, 75, 0 ]
        X[6] = [-15, -10, 75, 0 ]


        return t, X

    def path_flat_h(self):
        """H-path 50mx50m"""
        t = np.array( (50, 100, 150, 250, 350, 450 ) )
        X = np.zeros( (len(t), 4), dtype='float32' )
        X[0] = [-20, 10, 75, 0 ]
        X[1] = [ -10, 50, 75, 10 ]
        X[2] = [-10, -50, 75, 20 ]
        X[3] = [ -20, -40, 75, 10 ]
        X[4] = [ 0, 0, 75, -10 ]
        X[5] = [ 20, -40, 75, -20 ]

        return t, X


    def path_flat_spiral(self):
        """spiral-path 50mx50m"""
        t = np.array( (50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 350, 375, 400, 425, 450,475, 500, 525, 550,575, 600, 625, 650 ) )
        X = np.zeros( (len(t), 4), dtype='float32' )
        X[0] = [ 0, 50, 75, 0 ]
        X[1] = [ -50, 0, 75, 0 ]
        X[2] = [ 0, -50, 75, 0 ]
        X[3] = [ 50, 0, 75, 0 ]
        X[4] = [ 0, 40, 75, 0 ]
        X[5] = [ -40, 0, 75, 0 ]
        X[6] = [ 0, -40, 75, 0 ]
        X[7] = [ 40, 0, 75, 0 ]
        X[8] = [ 0, 30, 75, 0 ]
        X[9] = [ -30, 0, 75, 0 ]
        X[10] = [ 0, -30, 75, 0 ]
        X[11] = [ 30, 0, 75, 0 ]

        X[12] = [ 0, 20, 75, 0 ]
        X[13] = [ -20, 0, 75, 0 ]
        X[14] = [ 0, -20, 75, 0 ]
        X[15] = [ 20, 0, 75, 0 ]

        X[16] = [ 0, 10, 75, 0 ]
        X[17] = [ -10, 0, 75, 0 ]
        X[18] = [ 0, -10, 75, 0 ]
        X[19] = [ 10, 0, 75, 0 ]

        X[20] = [ 0, 5, 75, 0 ]
        X[21] = [ -5, 0, 75, 0 ]
        X[22] = [ 0, -5, 75, 0 ]
        X[23] = [ 5, 0, 75, 0 ]

        return t, X

    def path_helix(self):
        """spiral-path 50mx50m"""
        t = np.array( (50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 350, 375, 400, 425, 450,475, 500, 525, 550,575, 600, 625, 650 ) )
        X = np.zeros( (len(t), 4), dtype='float32' )
        X[0] = [ 0, 50, 65, 0 ]
        X[1] = [ -50, 0, 67, 5 ]
        X[2] = [ 0, -50, 69, 10 ]
        X[3] = [ 50, 0, 71, 15 ]
        X[4] = [ 0, 40, 73, 20 ]
        X[5] = [ -40, 0, 75, 25 ]
        X[6] = [ 0, -40, 78, 30 ]
        X[7] = [ 40, 0, 80, 35 ]
        X[8] = [ 0, 30, 82, 40 ]
        X[9] = [ -30, 0, 84, 45 ]
        X[10] = [ 0, -30, 85, 50 ]
        X[11] = [ 30, 0, 86, 55 ]

        X[12] = [ 0, 20, 88, 50 ]
        X[13] = [ -20, 0, 89, 40 ]
        X[14] = [ 0, -20, 92, 30 ]
        X[15] = [ 20, 0, 95, 20 ]

        X[16] = [ 0, 10, 80, 10 ]
        X[17] = [ -10, 0, 75, 0 ]
        X[18] = [ 0, -10, 65, -10 ]
        X[19] = [ 10, 0, 60, -20 ]

        X[20] = [ 0, 5, 70, -30 ]
        X[21] = [ -5, 0, 85, -40 ]
        X[22] = [ 0, -5, 95, -20 ]
        X[23] = [ 5, 0, 75, -10 ]

        return t, X

    def path_like_real( self ):
        """ start on the grass, go straight along y axis, den left and come back"""
        t = np.array( (50, 75, 100, 125, 150, 200, 250, 300, 350, 400) )
        X = np.zeros( (len(t), 4), dtype='float32' )

        X[0] = [ -25, -80, 75, 0 ]
        X[1] = [ -25, -50, 70, 5 ]
        X[2] = [ -25, -30, 75, 10 ]
        X[3] = [ -25, -10, 75, 5 ]
        X[4] = [ -25, 10, 75, -5 ]
        X[5] = [ -25, 30, 70, 0 ]
        X[6] = [ -35, 30, 75, 0 ]
        X[7] = [ -45, 30, 70, 5 ]
        X[8] = [ -55, 30, 70, 5 ]
        X[9] = [ -60, 30, 70, 0 ]



        return t, X

    def path_like_real2( self ):
        """ start on the grass, go straight along y axis, den left and come back"""
        t = np.array( (50, 75, 100, 125, 150, 200, 250, 300, 350, 400) )
        X = np.zeros( (len(t), 4), dtype='float32' )

        X[0] = [ 5, -60, 75, 0 ]
        X[1] = [ 5, -50, 70, 5 ]
        X[2] = [ 5, -30, 75, 5 ]
        X[3] = [ 5, -10, 75, 5 ]
        X[4] = [ 5, 10, 75, -5 ]
        X[5] = [ 5, 30, 70, 0 ]
        X[6] = [ -15, 30, 75, 0 ]
        X[7] = [ -35, 30, 70, 5 ]
        X[8] = [ -45, 30, 70, 5 ]
        X[9] = [ -50, 30, 70, 0 ]



        return t, X
